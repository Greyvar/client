// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: client_interface.proto

#include "client_interface.pb.h"
#include "client_interface.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace greyvarproto {

static const char* ClientInterface_method_names[] = {
  "/greyvarproto.ClientInterface/OnEntityMoved",
  "/greyvarproto.ClientInterface/OnPlayerQuit",
};

std::unique_ptr< ClientInterface::Stub> ClientInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientInterface::Stub> stub(new ClientInterface::Stub(channel));
  return stub;
}

ClientInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_OnEntityMoved_(ClientInterface_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnPlayerQuit_(ClientInterface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientInterface::Stub::OnEntityMoved(::grpc::ClientContext* context, const ::greyvarproto::EntityMoved& request, ::greyvarproto::NoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnEntityMoved_, context, request, response);
}

void ClientInterface::Stub::experimental_async::OnEntityMoved(::grpc::ClientContext* context, const ::greyvarproto::EntityMoved* request, ::greyvarproto::NoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnEntityMoved_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ClientInterface::Stub::AsyncOnEntityMovedRaw(::grpc::ClientContext* context, const ::greyvarproto::EntityMoved& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_OnEntityMoved_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ClientInterface::Stub::PrepareAsyncOnEntityMovedRaw(::grpc::ClientContext* context, const ::greyvarproto::EntityMoved& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_OnEntityMoved_, context, request, false);
}

::grpc::Status ClientInterface::Stub::OnPlayerQuit(::grpc::ClientContext* context, const ::greyvarproto::PlayerQuit& request, ::greyvarproto::NoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnPlayerQuit_, context, request, response);
}

void ClientInterface::Stub::experimental_async::OnPlayerQuit(::grpc::ClientContext* context, const ::greyvarproto::PlayerQuit* request, ::greyvarproto::NoResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnPlayerQuit_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ClientInterface::Stub::AsyncOnPlayerQuitRaw(::grpc::ClientContext* context, const ::greyvarproto::PlayerQuit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_OnPlayerQuit_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::greyvarproto::NoResponse>* ClientInterface::Stub::PrepareAsyncOnPlayerQuitRaw(::grpc::ClientContext* context, const ::greyvarproto::PlayerQuit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::greyvarproto::NoResponse>::Create(channel_.get(), cq, rpcmethod_OnPlayerQuit_, context, request, false);
}

ClientInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientInterface_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientInterface::Service, ::greyvarproto::EntityMoved, ::greyvarproto::NoResponse>(
          std::mem_fn(&ClientInterface::Service::OnEntityMoved), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientInterface::Service, ::greyvarproto::PlayerQuit, ::greyvarproto::NoResponse>(
          std::mem_fn(&ClientInterface::Service::OnPlayerQuit), this)));
}

ClientInterface::Service::~Service() {
}

::grpc::Status ClientInterface::Service::OnEntityMoved(::grpc::ServerContext* context, const ::greyvarproto::EntityMoved* request, ::greyvarproto::NoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClientInterface::Service::OnPlayerQuit(::grpc::ServerContext* context, const ::greyvarproto::PlayerQuit* request, ::greyvarproto::NoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace greyvarproto

