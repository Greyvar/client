// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_to_client_messages.proto

#ifndef PROTOBUF_server_5fto_5fclient_5fmessages_2eproto__INCLUDED
#define PROTOBUF_server_5fto_5fclient_5fmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_server_5fto_5fclient_5fmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMoveResponseImpl();
void InitDefaultsMoveResponse();
void InitDefaultsEntityMovedImpl();
void InitDefaultsEntityMoved();
void InitDefaultsPlayerQuitImpl();
void InitDefaultsPlayerQuit();
void InitDefaultsPlayerAlreadyHereImpl();
void InitDefaultsPlayerAlreadyHere();
void InitDefaultsPlayerJoinedImpl();
void InitDefaultsPlayerJoined();
void InitDefaultsPlayerYouImpl();
void InitDefaultsPlayerYou();
void InitDefaultsEntitySpawnImpl();
void InitDefaultsEntitySpawn();
void InitDefaultsTileImpl();
void InitDefaultsTile();
void InitDefaultsConnectionResponseImpl();
void InitDefaultsConnectionResponse();
void InitDefaultsNoResponseImpl();
void InitDefaultsNoResponse();
inline void InitDefaults() {
  InitDefaultsMoveResponse();
  InitDefaultsEntityMoved();
  InitDefaultsPlayerQuit();
  InitDefaultsPlayerAlreadyHere();
  InitDefaultsPlayerJoined();
  InitDefaultsPlayerYou();
  InitDefaultsEntitySpawn();
  InitDefaultsTile();
  InitDefaultsConnectionResponse();
  InitDefaultsNoResponse();
}
}  // namespace protobuf_server_5fto_5fclient_5fmessages_2eproto
namespace greyvarproto {
class ConnectionResponse;
class ConnectionResponseDefaultTypeInternal;
extern ConnectionResponseDefaultTypeInternal _ConnectionResponse_default_instance_;
class EntityMoved;
class EntityMovedDefaultTypeInternal;
extern EntityMovedDefaultTypeInternal _EntityMoved_default_instance_;
class EntitySpawn;
class EntitySpawnDefaultTypeInternal;
extern EntitySpawnDefaultTypeInternal _EntitySpawn_default_instance_;
class MoveResponse;
class MoveResponseDefaultTypeInternal;
extern MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
class NoResponse;
class NoResponseDefaultTypeInternal;
extern NoResponseDefaultTypeInternal _NoResponse_default_instance_;
class PlayerAlreadyHere;
class PlayerAlreadyHereDefaultTypeInternal;
extern PlayerAlreadyHereDefaultTypeInternal _PlayerAlreadyHere_default_instance_;
class PlayerJoined;
class PlayerJoinedDefaultTypeInternal;
extern PlayerJoinedDefaultTypeInternal _PlayerJoined_default_instance_;
class PlayerQuit;
class PlayerQuitDefaultTypeInternal;
extern PlayerQuitDefaultTypeInternal _PlayerQuit_default_instance_;
class PlayerYou;
class PlayerYouDefaultTypeInternal;
extern PlayerYouDefaultTypeInternal _PlayerYou_default_instance_;
class Tile;
class TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
}  // namespace greyvarproto
namespace greyvarproto {

// ===================================================================

class MoveResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.MoveResponse) */ {
 public:
  MoveResponse();
  virtual ~MoveResponse();

  MoveResponse(const MoveResponse& from);

  inline MoveResponse& operator=(const MoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveResponse(MoveResponse&& from) noexcept
    : MoveResponse() {
    *this = ::std::move(from);
  }

  inline MoveResponse& operator=(MoveResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveResponse* internal_default_instance() {
    return reinterpret_cast<const MoveResponse*>(
               &_MoveResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MoveResponse* other);
  friend void swap(MoveResponse& a, MoveResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MoveResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MoveResponse& from);
  void MergeFrom(const MoveResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MoveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.MoveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsMoveResponseImpl();
};
// -------------------------------------------------------------------

class EntityMoved : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.EntityMoved) */ {
 public:
  EntityMoved();
  virtual ~EntityMoved();

  EntityMoved(const EntityMoved& from);

  inline EntityMoved& operator=(const EntityMoved& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityMoved(EntityMoved&& from) noexcept
    : EntityMoved() {
    *this = ::std::move(from);
  }

  inline EntityMoved& operator=(EntityMoved&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityMoved& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityMoved* internal_default_instance() {
    return reinterpret_cast<const EntityMoved*>(
               &_EntityMoved_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EntityMoved* other);
  friend void swap(EntityMoved& a, EntityMoved& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityMoved* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityMoved* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityMoved& from);
  void MergeFrom(const EntityMoved& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityMoved* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 entityId = 1;
  void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entityid() const;
  void set_entityid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.EntityMoved)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 entityid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsEntityMovedImpl();
};
// -------------------------------------------------------------------

class PlayerQuit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerQuit) */ {
 public:
  PlayerQuit();
  virtual ~PlayerQuit();

  PlayerQuit(const PlayerQuit& from);

  inline PlayerQuit& operator=(const PlayerQuit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerQuit(PlayerQuit&& from) noexcept
    : PlayerQuit() {
    *this = ::std::move(from);
  }

  inline PlayerQuit& operator=(PlayerQuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerQuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerQuit* internal_default_instance() {
    return reinterpret_cast<const PlayerQuit*>(
               &_PlayerQuit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerQuit* other);
  friend void swap(PlayerQuit& a, PlayerQuit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerQuit* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerQuit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerQuit& from);
  void MergeFrom(const PlayerQuit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerQuit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerQuit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsPlayerQuitImpl();
};
// -------------------------------------------------------------------

class PlayerAlreadyHere : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerAlreadyHere) */ {
 public:
  PlayerAlreadyHere();
  virtual ~PlayerAlreadyHere();

  PlayerAlreadyHere(const PlayerAlreadyHere& from);

  inline PlayerAlreadyHere& operator=(const PlayerAlreadyHere& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerAlreadyHere(PlayerAlreadyHere&& from) noexcept
    : PlayerAlreadyHere() {
    *this = ::std::move(from);
  }

  inline PlayerAlreadyHere& operator=(PlayerAlreadyHere&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerAlreadyHere& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerAlreadyHere* internal_default_instance() {
    return reinterpret_cast<const PlayerAlreadyHere*>(
               &_PlayerAlreadyHere_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PlayerAlreadyHere* other);
  friend void swap(PlayerAlreadyHere& a, PlayerAlreadyHere& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerAlreadyHere* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerAlreadyHere* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerAlreadyHere& from);
  void MergeFrom(const PlayerAlreadyHere& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerAlreadyHere* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerAlreadyHere)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsPlayerAlreadyHereImpl();
};
// -------------------------------------------------------------------

class PlayerJoined : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerJoined) */ {
 public:
  PlayerJoined();
  virtual ~PlayerJoined();

  PlayerJoined(const PlayerJoined& from);

  inline PlayerJoined& operator=(const PlayerJoined& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerJoined(PlayerJoined&& from) noexcept
    : PlayerJoined() {
    *this = ::std::move(from);
  }

  inline PlayerJoined& operator=(PlayerJoined&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerJoined& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerJoined* internal_default_instance() {
    return reinterpret_cast<const PlayerJoined*>(
               &_PlayerJoined_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PlayerJoined* other);
  friend void swap(PlayerJoined& a, PlayerJoined& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerJoined* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerJoined* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerJoined& from);
  void MergeFrom(const PlayerJoined& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerJoined* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerJoined)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsPlayerJoinedImpl();
};
// -------------------------------------------------------------------

class PlayerYou : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.PlayerYou) */ {
 public:
  PlayerYou();
  virtual ~PlayerYou();

  PlayerYou(const PlayerYou& from);

  inline PlayerYou& operator=(const PlayerYou& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerYou(PlayerYou&& from) noexcept
    : PlayerYou() {
    *this = ::std::move(from);
  }

  inline PlayerYou& operator=(PlayerYou&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerYou& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerYou* internal_default_instance() {
    return reinterpret_cast<const PlayerYou*>(
               &_PlayerYou_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PlayerYou* other);
  friend void swap(PlayerYou& a, PlayerYou& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerYou* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerYou* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerYou& from);
  void MergeFrom(const PlayerYou& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerYou* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 playerid() const;
  void set_playerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.PlayerYou)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 playerid_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsPlayerYouImpl();
};
// -------------------------------------------------------------------

class EntitySpawn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.EntitySpawn) */ {
 public:
  EntitySpawn();
  virtual ~EntitySpawn();

  EntitySpawn(const EntitySpawn& from);

  inline EntitySpawn& operator=(const EntitySpawn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntitySpawn(EntitySpawn&& from) noexcept
    : EntitySpawn() {
    *this = ::std::move(from);
  }

  inline EntitySpawn& operator=(EntitySpawn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySpawn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntitySpawn* internal_default_instance() {
    return reinterpret_cast<const EntitySpawn*>(
               &_EntitySpawn_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(EntitySpawn* other);
  friend void swap(EntitySpawn& a, EntitySpawn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntitySpawn* New() const PROTOBUF_FINAL { return New(NULL); }

  EntitySpawn* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntitySpawn& from);
  void MergeFrom(const EntitySpawn& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntitySpawn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string texture = 6;
  void clear_texture();
  static const int kTextureFieldNumber = 6;
  const ::std::string& texture() const;
  void set_texture(const ::std::string& value);
  #if LANG_CXX11
  void set_texture(::std::string&& value);
  #endif
  void set_texture(const char* value);
  void set_texture(const char* value, size_t size);
  ::std::string* mutable_texture();
  ::std::string* release_texture();
  void set_allocated_texture(::std::string* texture);

  // int32 entityId = 1;
  void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::int32 entityid() const;
  void set_entityid(::google::protobuf::int32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  ::google::protobuf::int32 w() const;
  void set_w(::google::protobuf::int32 value);

  // int32 h = 5;
  void clear_h();
  static const int kHFieldNumber = 5;
  ::google::protobuf::int32 h() const;
  void set_h(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.EntitySpawn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr texture_;
  ::google::protobuf::int32 entityid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 w_;
  ::google::protobuf::int32 h_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsEntitySpawnImpl();
};
// -------------------------------------------------------------------

class Tile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.Tile) */ {
 public:
  Tile();
  virtual ~Tile();

  Tile(const Tile& from);

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(Tile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Tile* other);
  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tile* New() const PROTOBUF_FINAL { return New(NULL); }

  Tile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string tex = 3;
  void clear_tex();
  static const int kTexFieldNumber = 3;
  const ::std::string& tex() const;
  void set_tex(const ::std::string& value);
  #if LANG_CXX11
  void set_tex(::std::string&& value);
  #endif
  void set_tex(const char* value);
  void set_tex(const char* value, size_t size);
  ::std::string* mutable_tex();
  ::std::string* release_tex();
  void set_allocated_tex(::std::string* tex);

  // int32 col = 1;
  void clear_col();
  static const int kColFieldNumber = 1;
  ::google::protobuf::int32 col() const;
  void set_col(::google::protobuf::int32 value);

  // int32 row = 2;
  void clear_row();
  static const int kRowFieldNumber = 2;
  ::google::protobuf::int32 row() const;
  void set_row(::google::protobuf::int32 value);

  // bool flipH = 4;
  void clear_fliph();
  static const int kFlipHFieldNumber = 4;
  bool fliph() const;
  void set_fliph(bool value);

  // bool flipV = 5;
  void clear_flipv();
  static const int kFlipVFieldNumber = 5;
  bool flipv() const;
  void set_flipv(bool value);

  // int32 rot = 6;
  void clear_rot();
  static const int kRotFieldNumber = 6;
  ::google::protobuf::int32 rot() const;
  void set_rot(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:greyvarproto.Tile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tex_;
  ::google::protobuf::int32 col_;
  ::google::protobuf::int32 row_;
  bool fliph_;
  bool flipv_;
  ::google::protobuf::int32 rot_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsTileImpl();
};
// -------------------------------------------------------------------

class ConnectionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.ConnectionResponse) */ {
 public:
  ConnectionResponse();
  virtual ~ConnectionResponse();

  ConnectionResponse(const ConnectionResponse& from);

  inline ConnectionResponse& operator=(const ConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectionResponse(ConnectionResponse&& from) noexcept
    : ConnectionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectionResponse& operator=(ConnectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectionResponse*>(
               &_ConnectionResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ConnectionResponse* other);
  friend void swap(ConnectionResponse& a, ConnectionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectionResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectionResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectionResponse& from);
  void MergeFrom(const ConnectionResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serverVersion = 1;
  void clear_serverversion();
  static const int kServerVersionFieldNumber = 1;
  const ::std::string& serverversion() const;
  void set_serverversion(const ::std::string& value);
  #if LANG_CXX11
  void set_serverversion(::std::string&& value);
  #endif
  void set_serverversion(const char* value);
  void set_serverversion(const char* value, size_t size);
  ::std::string* mutable_serverversion();
  ::std::string* release_serverversion();
  void set_allocated_serverversion(::std::string* serverversion);

  // @@protoc_insertion_point(class_scope:greyvarproto.ConnectionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr serverversion_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsConnectionResponseImpl();
};
// -------------------------------------------------------------------

class NoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:greyvarproto.NoResponse) */ {
 public:
  NoResponse();
  virtual ~NoResponse();

  NoResponse(const NoResponse& from);

  inline NoResponse& operator=(const NoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NoResponse(NoResponse&& from) noexcept
    : NoResponse() {
    *this = ::std::move(from);
  }

  inline NoResponse& operator=(NoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoResponse* internal_default_instance() {
    return reinterpret_cast<const NoResponse*>(
               &_NoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NoResponse* other);
  friend void swap(NoResponse& a, NoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  NoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoResponse& from);
  void MergeFrom(const NoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:greyvarproto.NoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_server_5fto_5fclient_5fmessages_2eproto::TableStruct;
  friend void ::protobuf_server_5fto_5fclient_5fmessages_2eproto::InitDefaultsNoResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveResponse

// int32 playerId = 1;
inline void MoveResponse::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 MoveResponse::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.MoveResponse.playerId)
  return playerid_;
}
inline void MoveResponse::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.MoveResponse.playerId)
}

// -------------------------------------------------------------------

// EntityMoved

// int32 entityId = 1;
inline void EntityMoved::clear_entityid() {
  entityid_ = 0;
}
inline ::google::protobuf::int32 EntityMoved::entityid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntityMoved.entityId)
  return entityid_;
}
inline void EntityMoved::set_entityid(::google::protobuf::int32 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntityMoved.entityId)
}

// -------------------------------------------------------------------

// PlayerQuit

// int32 playerId = 1;
inline void PlayerQuit::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerQuit::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerQuit.playerId)
  return playerid_;
}
inline void PlayerQuit::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerQuit.playerId)
}

// -------------------------------------------------------------------

// PlayerAlreadyHere

// int32 playerId = 1;
inline void PlayerAlreadyHere::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerAlreadyHere::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerAlreadyHere.playerId)
  return playerid_;
}
inline void PlayerAlreadyHere::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerAlreadyHere.playerId)
}

// -------------------------------------------------------------------

// PlayerJoined

// string username = 1;
inline void PlayerJoined::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerJoined::username() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerJoined.username)
  return username_.GetNoArena();
}
inline void PlayerJoined::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerJoined.username)
}
#if LANG_CXX11
inline void PlayerJoined::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.PlayerJoined.username)
}
#endif
inline void PlayerJoined::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.PlayerJoined.username)
}
inline void PlayerJoined::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.PlayerJoined.username)
}
inline ::std::string* PlayerJoined::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.PlayerJoined.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerJoined::release_username() {
  // @@protoc_insertion_point(field_release:greyvarproto.PlayerJoined.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerJoined::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.PlayerJoined.username)
}

// -------------------------------------------------------------------

// PlayerYou

// int32 playerId = 1;
inline void PlayerYou::clear_playerid() {
  playerid_ = 0;
}
inline ::google::protobuf::int32 PlayerYou::playerid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.PlayerYou.playerId)
  return playerid_;
}
inline void PlayerYou::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.PlayerYou.playerId)
}

// -------------------------------------------------------------------

// EntitySpawn

// int32 entityId = 1;
inline void EntitySpawn::clear_entityid() {
  entityid_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::entityid() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.entityId)
  return entityid_;
}
inline void EntitySpawn::set_entityid(::google::protobuf::int32 value) {
  
  entityid_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.entityId)
}

// int32 x = 2;
inline void EntitySpawn::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::x() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.x)
  return x_;
}
inline void EntitySpawn::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.x)
}

// int32 y = 3;
inline void EntitySpawn::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::y() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.y)
  return y_;
}
inline void EntitySpawn::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.y)
}

// int32 w = 4;
inline void EntitySpawn::clear_w() {
  w_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::w() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.w)
  return w_;
}
inline void EntitySpawn::set_w(::google::protobuf::int32 value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.w)
}

// int32 h = 5;
inline void EntitySpawn::clear_h() {
  h_ = 0;
}
inline ::google::protobuf::int32 EntitySpawn::h() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.h)
  return h_;
}
inline void EntitySpawn::set_h(::google::protobuf::int32 value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.h)
}

// string texture = 6;
inline void EntitySpawn::clear_texture() {
  texture_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EntitySpawn::texture() const {
  // @@protoc_insertion_point(field_get:greyvarproto.EntitySpawn.texture)
  return texture_.GetNoArena();
}
inline void EntitySpawn::set_texture(const ::std::string& value) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.EntitySpawn.texture)
}
#if LANG_CXX11
inline void EntitySpawn::set_texture(::std::string&& value) {
  
  texture_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.EntitySpawn.texture)
}
#endif
inline void EntitySpawn::set_texture(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.EntitySpawn.texture)
}
inline void EntitySpawn::set_texture(const char* value, size_t size) {
  
  texture_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.EntitySpawn.texture)
}
inline ::std::string* EntitySpawn::mutable_texture() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.EntitySpawn.texture)
  return texture_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EntitySpawn::release_texture() {
  // @@protoc_insertion_point(field_release:greyvarproto.EntitySpawn.texture)
  
  return texture_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EntitySpawn::set_allocated_texture(::std::string* texture) {
  if (texture != NULL) {
    
  } else {
    
  }
  texture_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), texture);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.EntitySpawn.texture)
}

// -------------------------------------------------------------------

// Tile

// int32 col = 1;
inline void Tile::clear_col() {
  col_ = 0;
}
inline ::google::protobuf::int32 Tile::col() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.col)
  return col_;
}
inline void Tile::set_col(::google::protobuf::int32 value) {
  
  col_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.col)
}

// int32 row = 2;
inline void Tile::clear_row() {
  row_ = 0;
}
inline ::google::protobuf::int32 Tile::row() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.row)
  return row_;
}
inline void Tile::set_row(::google::protobuf::int32 value) {
  
  row_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.row)
}

// string tex = 3;
inline void Tile::clear_tex() {
  tex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Tile::tex() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.tex)
  return tex_.GetNoArena();
}
inline void Tile::set_tex(const ::std::string& value) {
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.tex)
}
#if LANG_CXX11
inline void Tile::set_tex(::std::string&& value) {
  
  tex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.Tile.tex)
}
#endif
inline void Tile::set_tex(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.Tile.tex)
}
inline void Tile::set_tex(const char* value, size_t size) {
  
  tex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.Tile.tex)
}
inline ::std::string* Tile::mutable_tex() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.Tile.tex)
  return tex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Tile::release_tex() {
  // @@protoc_insertion_point(field_release:greyvarproto.Tile.tex)
  
  return tex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Tile::set_allocated_tex(::std::string* tex) {
  if (tex != NULL) {
    
  } else {
    
  }
  tex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tex);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.Tile.tex)
}

// bool flipH = 4;
inline void Tile::clear_fliph() {
  fliph_ = false;
}
inline bool Tile::fliph() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.flipH)
  return fliph_;
}
inline void Tile::set_fliph(bool value) {
  
  fliph_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.flipH)
}

// bool flipV = 5;
inline void Tile::clear_flipv() {
  flipv_ = false;
}
inline bool Tile::flipv() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.flipV)
  return flipv_;
}
inline void Tile::set_flipv(bool value) {
  
  flipv_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.flipV)
}

// int32 rot = 6;
inline void Tile::clear_rot() {
  rot_ = 0;
}
inline ::google::protobuf::int32 Tile::rot() const {
  // @@protoc_insertion_point(field_get:greyvarproto.Tile.rot)
  return rot_;
}
inline void Tile::set_rot(::google::protobuf::int32 value) {
  
  rot_ = value;
  // @@protoc_insertion_point(field_set:greyvarproto.Tile.rot)
}

// -------------------------------------------------------------------

// ConnectionResponse

// string serverVersion = 1;
inline void ConnectionResponse::clear_serverversion() {
  serverversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConnectionResponse::serverversion() const {
  // @@protoc_insertion_point(field_get:greyvarproto.ConnectionResponse.serverVersion)
  return serverversion_.GetNoArena();
}
inline void ConnectionResponse::set_serverversion(const ::std::string& value) {
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:greyvarproto.ConnectionResponse.serverVersion)
}
#if LANG_CXX11
inline void ConnectionResponse::set_serverversion(::std::string&& value) {
  
  serverversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:greyvarproto.ConnectionResponse.serverVersion)
}
#endif
inline void ConnectionResponse::set_serverversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:greyvarproto.ConnectionResponse.serverVersion)
}
inline void ConnectionResponse::set_serverversion(const char* value, size_t size) {
  
  serverversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:greyvarproto.ConnectionResponse.serverVersion)
}
inline ::std::string* ConnectionResponse::mutable_serverversion() {
  
  // @@protoc_insertion_point(field_mutable:greyvarproto.ConnectionResponse.serverVersion)
  return serverversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConnectionResponse::release_serverversion() {
  // @@protoc_insertion_point(field_release:greyvarproto.ConnectionResponse.serverVersion)
  
  return serverversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConnectionResponse::set_allocated_serverversion(::std::string* serverversion) {
  if (serverversion != NULL) {
    
  } else {
    
  }
  serverversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serverversion);
  // @@protoc_insertion_point(field_set_allocated:greyvarproto.ConnectionResponse.serverVersion)
}

// -------------------------------------------------------------------

// NoResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace greyvarproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fto_5fclient_5fmessages_2eproto__INCLUDED
